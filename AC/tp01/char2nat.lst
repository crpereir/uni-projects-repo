P16 assembler v1.4.0 (Mar  6 2023)	.\char2nat.lst	Mon Mar 20 16:51:04 2023

Sections
Index   Name            Address   Size
0       .text           0000      003E 62

Symbols
Name                    Type      Value       Section
char2nat                LABEL     0000 0      .text
else_if                 LABEL     0016 22     .text
if                      LABEL     0004 4      .text
if_2                    LABEL     0034 52     .text
if_cond1                LABEL     0028 40     .text
if_cond2                LABEL     0030 48     .text
if_end                  LABEL     0038 56     .text
line#46                 LABEL     003C 60     .text
NAN                     ABSOLUTE  FFFF 65535  .text

Code listing
   1           	; ---------------------------------------------
   2           	; uint16_t char2nat(char symbol, uint16_t radix)
   3           	; r0 = symbol, r1 = radix, r2 = number, r3 = temp
   4           	; r4 = temp, r5 = temp
   5           	
   6          	.equ NAN, 0xFFFF
   7           	
   8           	
   9           	char2nat:
  10 0000 F2 6F	    mov r2, #NAN &0xFF
  11 0002 F2 7F	    movt r2, #NAN & 0xFF
  12           	if:
  13 0004 03 63	    mov r3, #'0'
  14 0006 80 B9	    cmp r0, r3          ; symbol >= '0'
  15 0008 06 48	    blo else_if
  16 000A 93 63	    mov r3, #'9'         
  17 000C 30 B8	    cmp r3, r0          ; symbol <= '9'
  18 000E 03 48	    blo else_if
  19 0010 03 63	    mov r3, #'0'
  20 0012 82 89	    sub r2, r0, r3      ; number = symbol - '0'
  21 0014 09 58	    b if_cond1
  22           	else_if: 
  23 0016 13 64	    mov r3, #'A'         
  24 0018 80 B9	    cmp r0, r3          ; symbol >= 'A'
  25 001A 06 48	    blo if_cond1
  26 001C 63 64	    mov r3, #'F' 
  27 001E 30 B8	    cmp r3, r0          ; symbol <= 'F'
  28 0020 03 48	    blo if_cond1
  29 0022 13 64	    mov r3, #'A' 
  30 0024 82 89	    sub r2, r0, r3      ; number = symbol - 'A'
  31 0026 22 A5	    add r2, r2, #10     ; number = r5 + 10
  32           	if_cond1:
  33 0028 03 61	    mov r3, #16
  34 002A B0 B8	    cmp r3, r1          ; radix > 16
  35 002C 01 4C	    bhs if_cond2
  36 002E 02 58	    b if_2
  37           	if_cond2:
  38 0030 A0 B8	    cmp r2, r1          ; number >= radix
  39 0032 02 48	    blo if_end
  40           	if_2:
  41 0034 F2 6F	    mov r2, #NAN & 0xFF
  42 0036 F2 7F	    movt r2, #NAN & 0xFF  
  43           	if_end:
  44 0038 00 B1	    mov r0, r2          ; return number
  45 003A 0F B7	    mov pc, lr
  46 003C FF 5B	    b .
