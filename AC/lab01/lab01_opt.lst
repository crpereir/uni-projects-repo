P16 assembler v1.4.0 (Mar  6 2023)	lab01_opt.lst	Wed Mar 15 13:36:55 2023

Sections
Index   Name            Address   Size
0       .text           0000      0026 38

Symbols
Name                    Type      Value       Section
else_while              LABEL     0018 24     .text
if_cond                 LABEL     0002 2      .text
if_cond2                LABEL     0008 8      .text
if_end                  LABEL     0024 36     .text
line#38                 LABEL     0024 36     .text
while                   LABEL     000C 12     .text
while_end               LABEL     0024 36     .text

Code listing
   1           	
   2           	; -----------------------------------------------------------------------------
   3           	; Ficheiro:  lab01.S
   4           	; Descricao: Codigo de suporte a realizacao da 1a atividade laboratorial de AC.
   5           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   6           	; Data:      11-03-2022
   7           	; -----------------------------------------------------------------------------
   8           	
   9           		; r0 guarda o valor da variavel M
  10           		; r1 guarda o valor da variavel m
  11           		; r2 guarda o valor da variavel p
  12           		; r3 e utilizado para guardar valores temporariamente
  13           	
  14 0000 02 60		mov r2, #0         ; p = 0
  15           	if_cond:
  16 0002 03 60		mov	r3, #0         ; guarda-se o zero temporariamente num registo
  17 0004 80 B9		cmp r0, r3         ; M != 0
  18 0006 0E 40		beq if_end
  19           	if_cond2:
  20 0008 10 B8	    cmp r1, r0
  21 000A 06 4C	    bhs else_while
  22           	while:
  23 000C 03 60		mov r3, #0		   ; guarda-se o zero temporariamente num registo
  24 000E B0 B8		cmp	r3, r1         ; m > 0
  25 0010 09 4C		bhs	while_end
  26 0012 22 80		add	r2, r2, r0     ; p = p + M
  27 0014 91 A8		sub	r1, r1, #1     ; m--
  28 0016 FA 5B		b	while
  29           	else_while:
  30 0018 03 60	    mov r3, #0		   ; guarda-se o zero temporariamente num registo
  31 001A 30 B8		cmp	r3, r0         ; M > 0
  32 001C 03 4C		bhs	while_end
  33 001E A2 80		add	r2, r2, r1     ; p = p + m
  34 0020 80 A8		sub	r0, r0, #1     ; M--
  35 0022 FA 5B		b	else_while
  36           	while_end:
  37           	if_end:
  38 0024 FF 5B		b   .
